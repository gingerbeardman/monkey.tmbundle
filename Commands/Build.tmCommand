<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveActiveFile</string>
	<key>command</key>
	<string># if TM_MONKEY is not set, assume transcc_mac to be in the user's PATH
if [[ -n "$TM_MONKEY" ]] ; then
	TRANS="$TM_MONKEY/bin/transcc_macos"
else
	exit_show_tool_tip \
"TM_MONKEY shell variable not set.

Please see the Help (⌃⌘T Help) command for more information."
fi

MNKY_COMPILE_DIR=$TM_DIRECTORY

# set up
if [[ -n "$TM_MONKEY_MAIN_FILE" &amp;&amp; -n "$TM_PROJECT_DIRECTORY" ]] ; then
	# Project build
	cd "$TM_PROJECT_DIRECTORY"
	MNKY_COMPILE_DIR=$TM_PROJECT_DIRECTORY
	MNKY_COMPILE_PATH=$TM_MONKEY_MAIN_FILE
else
	if [[ -n "$TM_DIRECTORY" ]] ; then
		# Change to the file's directory if possible
		cd "$TM_DIRECTORY"
	fi
	MNKY_COMPILE_PATH=$TM_FILEPATH
fi

. "$TM_SUPPORT_PATH/lib/webpreview.sh"
html_header "Build monkey" "$MNKY_COMPILE_PATH"

# fail if the path is not set
if [[ -n "$MNKY_COMPILE_PATH" ]] ; then

	# compensate for Win32 / E paths
	if [[ "$MACHTYPE" == "i686-pc-cygwin" ]] ; then
		MNKY_COMPILE_PATH=`cygpath -m "$MNKY_COMPILE_PATH"`
	fi

	MODGREP=`grep -i -E -e "^[[:space:]]*module[[:space:]]+(\w+\.\w+)" "$MNKY_COMPILE_PATH" | grep -E -e "\w+\.\w+" -o | tr '[:upper:]' '[:lower:]'`

	#scan for build options
	TARGET='Html5_Game'
	CONFIG='debug'
	RUNAFTER='NO'
	CLEANBUILD='NO'
     UPDATE='NO'

	for BUILDOPT in `grep -hiE -e "^[^\\w\\d]*'[^\\w\\d]*buildopt:[^\\d\\w]*\\w+" "$MNKY_COMPILE_PATH" | \
		ruby -w -e "puts STDIN.read().gsub(/^\s*'\s*buildopt:\s*/,\"\").gsub(/\r?/, \"\")"` ;
	do
		case "$BUILDOPT" in
		'run')
			RUNAFTER='YES'
		;;
		'update')
			UPDATE='YES'
		;;
		'clean')
			CLEANBUILD='YES'
		;;
		'debug')
			CONFIG='debug'
		;;
		'release')
			CONFIG='release'
		;;
		'Html5_Game')
			TARGET='Html5_Game'
		;;
		'Flash_Game')
			TARGET='Flash_Game'
		;;
		'Xna_Game')
			TARGET='Xna_Game'
		;;
		'Android_Game')
			TARGET='Android_Game'
		;;
		'iOS_Game')
			TARGET='iOS_Game'
		;;
		'Glfw_Game')
			TARGET='Glfw_Game'
		;;
		'C++_Tool')
			TARGET='C++_Tool'
		;;
		esac
	done

	echo "&lt;h3&gt;Options&lt;/h3&gt;"
	echo "&lt;ul&gt;"
	echo "&lt;li&gt;$TARGET&lt;/li&gt;"

	if [[ "$CONFIG" == "debug" ]] ; then
		echo "&lt;li&gt;debug&lt;/li&gt;"
	else
		echo "&lt;li&gt;release&lt;/li&gt;"
	fi

	if [[ "$CLEANBUILD" == "YES" ]] ; then
		BUILDOPTS="$BUILDOPTS -clean"
		echo "&lt;li&gt;clean&lt;/li&gt;"
	fi

	if [[ "$UPDATE" == "YES" ]] ; then
		BUILDOPTS="$BUILDOPTS -update"
		echo "&lt;li&gt;update&lt;/li&gt;"
	fi

	if [[ "$RUNAFTER" == "YES" ]] ; then
		BUILDOPTS="$BUILDOPTS -run"
		echo "&lt;li&gt;run&lt;/li&gt;"
	fi

	BUILDOPTS="$BUILDOPTS -config=$CONFIG"
	BUILDOPTS="$BUILDOPTS -target=$TARGET"

	echo "&lt;/ul&gt;"

	# build/fail?
	if [[ -n "$MNKY_COMPILE_PATH" ]] ; then
		echo "&lt;h3&gt;Command&lt;/h3&gt;"
		echo "&lt;pre&gt;$ transcc_macos$BUILDOPTS \"$MNKY_COMPILE_PATH\"&lt;/pre&gt;"

		echo "&lt;h3&gt;Output...&lt;/h3&gt;"
		echo "&lt;pre&gt;"

		# $TRANS $BUILDOPTS "$MNKY_COMPILE_PATH" 2&gt;&amp;amp;1
		OUTPUT=`$TRANS $BUILDOPTS "$MNKY_COMPILE_PATH"`
		END_LINE=`echo "$OUTPUT" | tail -1`
		echo "$OUTPUT"

		echo "&lt;/pre&gt;"

		ERR_FILE=`echo "$END_LINE" | sed 's/\(.*\)&lt;[0-9]*&gt;.*/\1/'`
		ERR_LINE=`echo "$END_LINE" | sed 's/.*&lt;\([0-9]*\)&gt;.*/\1/'`
		if [[ "$END_LINE" != "Building..." ]] ; then
			open "txmt://open/?url=file://$ERR_FILE&amp;line=$ERR_LINE"
		fi
	fi

else
	echo "&lt;pre&gt;Build failed&lt;/pre&gt;"
fi

exit_show_html</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>@b</string>
	<key>name</key>
	<string>Build</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>scope</key>
	<string>source.monkey</string>
	<key>uuid</key>
	<string>3146F9B6-03B6-429C-959D-2A8C405869DB</string>
</dict>
</plist>
