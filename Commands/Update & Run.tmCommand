<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveActiveFile</string>
	<key>command</key>
	<string># if TM_MONKEY is not set, assume trans_mac to be in the user's PATH
if [[ -n "$TM_MONKEY" ]] ; then
	TRANS="$TM_MONKEY/bin/trans_macos"
else
	exit_show_tool_tip \
"TM_MONKEY shell variable not set.

Please see the Help (⌃⌘T Help) command for more information."
fi

MNKY_COMPILE_DIR=$TM_DIRECTORY

# set up
if [[ -n "$TM_MONKEY_MAIN_FILE" &amp;&amp; -n "$TM_PROJECT_DIRECTORY" ]] ; then
	# Project build
	cd "$TM_PROJECT_DIRECTORY"
	MNKY_COMPILE_DIR=$TM_PROJECT_DIRECTORY
	MNKY_COMPILE_PATH=$TM_MONKEY_MAIN_FILE
else
	if [[ -n "$TM_DIRECTORY" ]] ; then
		# Change to the file's directory if possible
		cd "$TM_DIRECTORY"
	fi
	MNKY_COMPILE_PATH=$TM_FILEPATH
fi

. "$TM_SUPPORT_PATH/lib/webpreview.sh"
html_header "Build monkey" "$MNKY_COMPILE_PATH"

# fail if the path is not set
if [[ -n "$MNKY_COMPILE_PATH" ]] ; then

	# compensate for Win32 / E paths
	if [[ "$MACHTYPE" == "i686-pc-cygwin" ]] ; then
		MNKY_COMPILE_PATH=`cygpath -m "$MNKY_COMPILE_PATH"`
	fi

	MODGREP=`grep -i -E -e "^[[:space:]]*module[[:space:]]+(\w+\.\w+)" "$MNKY_COMPILE_PATH" | grep -E -e "\w+\.\w+" -o | tr '[:upper:]' '[:lower:]'`

	#scan for build options
	TARGET='html5'
	CONFIG='debug'
	RUNAFTER='YES'
	CLEANBUILD='NO'
     UPDATE='YES'

	for BUILDOPT in `grep -hiE -e "^[^\\w\\d]*'[^\\w\\d]*buildopt:[^\\d\\w]*\\w+" "$MNKY_COMPILE_PATH" | \
		ruby -w -e "puts STDIN.read().downcase().gsub(/^\s*'\s*buildopt:\s*/,\"\").gsub(/\r?/, \"\")"` ;
	do
		case "$BUILDOPT" in
		'run')
			RUNAFTER='YES'
		;;
		'update')
			UPDATE='YES'
		;;
		'clean')
			CLEANBUILD='YES'
		;;
		'debug')
			CONFIG='debug'
		;;
		'release')
			CONFIG='release'
		;;
		'html5')
			TARGET='html5'
		;;
		'flash')
			TARGET='flash'
		;;
		'xna')
			TARGET='xna'
		;;
		'android')
			TARGET='android'
		;;
		'ios')
			TARGET='ios'
		;;
		'glfw')
			TARGET='glfw'
		;;
		'stdcpp')
			TARGET='stdcpp'
		;;
		esac
	done

	echo "&lt;h3&gt;Options&lt;/h3&gt;"
	echo "&lt;ul&gt;"
	echo "&lt;li&gt;$TARGET&lt;/li&gt;"

	if [[ "$CONFIG" == "debug" ]] ; then
		echo "&lt;li&gt;debug&lt;/li&gt;"
	else
		echo "&lt;li&gt;release&lt;/li&gt;"
	fi

	if [[ "$CLEANBUILD" == "YES" ]] ; then
		BUILDOPTS="$BUILDOPTS -clean"
		echo "&lt;li&gt;clean&lt;/li&gt;"
	fi

	if [[ "$UPDATE" == "YES" ]] ; then
		BUILDOPTS="$BUILDOPTS -update"
		echo "&lt;li&gt;update&lt;/li&gt;"
	fi

	if [[ "$RUNAFTER" == "YES" ]] ; then
		BUILDOPTS="$BUILDOPTS -run"
		echo "&lt;li&gt;Run&lt;/li&gt;"
	fi

	BUILDOPTS="$BUILDOPTS -config=$CONFIG"
	BUILDOPTS="$BUILDOPTS -target=$TARGET"

	echo "&lt;/ul&gt;"

	# build/fail?
	if [[ -n "$MNKY_COMPILE_PATH" ]] ; then
		echo "&lt;h3&gt;Command&lt;/h3&gt;"
		echo "&lt;pre&gt;$ trans_macos$BUILDOPTS \"$MNKY_COMPILE_PATH\"&lt;/pre&gt;"

		echo "&lt;h3&gt;Output&lt;/h3&gt;"
		echo "&lt;pre&gt;"
		$TRANS $BUILDOPTS "$MNKY_COMPILE_PATH" 2&gt;&amp;1
		echo "&lt;/pre&gt;"
	fi

else
	pre "Build failed"
fi

exit_show_html</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>@r</string>
	<key>name</key>
	<string>Update &amp; Run</string>
	<key>output</key>
	<string>discard</string>
	<key>scope</key>
	<string>source.monkey</string>
	<key>uuid</key>
	<string>F11581F0-200D-468A-A4C6-8D145F900A94</string>
</dict>
</plist>
